package com.dustdawn.leetcode.ability;

/**
 * 319. 灯泡开关
 * 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭第二个。
 * 第三轮，你每三个灯泡就切换第三个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换第 i 个灯泡的开关。
 * 直到第 n 轮，你只需要切换最后一个灯泡的开关。
 * 找出并返回 n 轮后有多少个亮着的灯泡。
 * 提示：
 * 0 <= n <= 109
 *
 * @author dustdawn
 * @date 2022/5/29 13:23
 */
public class BulbSwitch {
    public static int bulbSwitch(int n) {
        /*
        假设6盏灯，第6盏灯会被按4次，第1、2、3、6轮都会被按 6=1*6=2*3，被按次数为偶数次
        假设12盏灯，第16盏灯会被按5次，16=1*16=2*8=4*4，奇数次
        只有按奇数次时，最后才是点亮的，16盏灯时，1*1=1，2*2=4，3*3=9，4*4=16盏灯都是亮的
         */
        return (int) Math.sqrt(n);
    }

    public static void main(String[] args) {
        /**
         * 示例 1：
         *
         *
         *
         * 输入：n = 3
         * 输出：1
         * 解释：
         * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
         * 第一轮后, 灯泡状态 [开启, 开启, 开启].
         * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
         * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
         *
         * 你应该返回 1，因为只有一个灯泡还亮着。
         * 示例 2：
         *
         * 输入：n = 0
         * 输出：0
         * 示例 3：
         *
         * 输入：n = 1
         * 输出：1
         */
    }
}
